package osgi.quartz.scheduler.consumer.jobs;

import java.util.Date;

import org.apache.log4j.Logger;

import org.quartz.Job;
import org.quartz.JobExecutionContext;
import org.quartz.JobExecutionException;
import org.quartz.JobKey;

import org.quartz.DisallowConcurrentExecution;
import org.quartz.PersistJobDataAfterExecution;

/**
 * <p>
 * A job dumb job that will throw a job execution exception
 * </p>
 * 
 * @author Bill Kratzer
 */
@PersistJobDataAfterExecution
@DisallowConcurrentExecution
public class BadJob2 implements Job {
	private static Logger logger = Logger.getLogger(BadJob2.class);
	
	@SuppressWarnings("unused")
	private int calculation;

    /**
     * Empty public constructor for job initialization
     */
    public BadJob2() {
    }

    /**
     * <p>
     * Called by the <code>{@link org.quartz.Scheduler}</code> when a <code>{@link org.quartz.Trigger}</code>
     * fires that is associated with the <code>Job</code>.
     * </p>
     * 
     * @throws JobExecutionException if there is an exception while executing the job.
     */
    public void execute(JobExecutionContext context) throws JobExecutionException {
        JobKey jobKey = context.getJobDetail().getKey();
        
        logger.info("---" + jobKey + " executing at " + new Date());

        // a contrived example of an exception that
        // will be generated by this job due to a 
        // divide by zero error
        try {
             this.calculation = 4815 / 0;
        } catch (Exception exception) {
            logger.info("--- Error in job!");
            
            JobExecutionException execution = new JobExecutionException(exception);
            
            // Quartz will automatically unschedule
            // all triggers associated with this job
            // so that it does not run again
            execution.setUnscheduleAllTriggers(true);
            
            throw execution;
        }

        logger.info("---" + jobKey + " completed at " + new Date());
    }
}